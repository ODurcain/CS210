    if (size() == queue.length) 
      expandCapacity();

----------------------------------------------------------

    larger =(T[]) new Object[queue.length *2];   
    
    for(int j=0; j < count; j++)
    {
      larger[j] = queue[front];
      front=(front+1) % queue.length;
    }
    
    front = 0;
    rear = count;
    queue = larger;

----------------------------------------------------------

Essentially what I did in the enqueue function is call the expandCapacity function whenever size == queue.length which is just the value of the count directly correlated to the length of the queue. For the expandCapacity function it just doubles the queue.length and then places the item at the front of the queue into the new larger queue and then does a modulus action to get a new front value. front then is set to 0 while rear is set to count and queue is now set to larger. This was the most logical way I saw to implement this action of expanding queue capacity.